
:root[data-theme="dark"] {
  --tw-prose-body: #a1a1aa;
  --tw-prose-counters: #e4e4e7;
  --tw-prose-headings: #e4e4e7;
}

:root[data-theme="light"] {
  --tw-prose-body: #52525b;
  --tw-prose-counters: #18181b;
  --tw-prose-headings: #18181b;
}

.prose {
  --tw-prose-links: #14b8a6;
  --tw-prose-links-hover: #0d9488;
  --tw-prose-underline: rgb(20 184 166 / 0.2);
  --tw-prose-underline-hover: #14b8a6;
  --tw-prose-bold: #18181b;
  --tw-prose-bullets: #18181b;
  --tw-prose-hr: #f4f4f5;
  --tw-prose-quote-borders: #e4e4e7;
  --tw-prose-captions: #a1a1aa;
  --tw-prose-code: #d4d4d8;
  --tw-prose-pre-code: #f4f4f5;
  --tw-prose-pre-bg: #18181b;
  --tw-prose-pre-border: transparent;
  --tw-prose-th-borders: #e4e4e7;
  --tw-prose-td-borders: #f4f4f5;
  --tw-prose-invert-body: #a1a1aa;
  --tw-prose-invert-headings: #e4e4e7;
  --tw-prose-invert-links: #2dd4bf;
  --tw-prose-invert-links-hover: #2dd4bf;
  --tw-prose-invert-underline: rgb(45 212 191 / 0.3);
  --tw-prose-invert-underline-hover: #2dd4bf;
  --tw-prose-invert-bold: #e4e4e7;
  --tw-prose-invert-counters: #e4e4e7;
  --tw-prose-invert-bullets: #e4e4e7;
  --tw-prose-invert-hr: rgb(63 63 70 / 0.4);
  --tw-prose-invert-quote-borders: #71717a;
  --tw-prose-invert-captions: #71717a;
  --tw-prose-invert-code: #d4d4d8;
  --tw-prose-invert-code-bg: rgb(228 228 231 / 0.05);
  --tw-prose-invert-pre-code: #f4f4f5;
  --tw-prose-invert-pre-bg: rgb(0 0 0 / 0.4);
  --tw-prose-invert-pre-border: rgb(228 228 231 / 0.1);
  /* --tw-prose-invert-th-borders: #3f3f46; */
  /* --tw-prose-invert-td-borders: #27272a; */
  color: var(--tw-prose-body);
  line-height: 1.75rem;
}

.prose :where(.prose > *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 2.5rem;
  margin-bottom: 2.5rem;
}

.prose :where(p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.75rem;
  margin-bottom: 1.75rem;
}

.prose :where(h2, h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
}

.prose :where(h2):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-size: 1.25rem;
  line-height: 1.75rem;
  margin-top: 5rem;
  margin-bottom: 1rem;
}

.prose :where(h3):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-size: 1rem;
  line-height: 1.75rem;
  margin-top: 4rem;
  margin-bottom: 1rem;
}

.prose :where(:is(h2, h3) + *):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0;
}

.prose :where(img):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-radius: 1.5rem;
}

.prose :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-links);
  font-weight: 600;
  text-decoration: underline;
  text-decoration-color: var(--tw-prose-underline);
  transition-property: color, text-decoration-color;
  transition-duration: 150ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.prose :where(a:hover):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-links-hover);
  text-decoration-color: var(--tw-prose-underline-hover);
}

.prose :where(strong):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600;
}


.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  display: inline-block;
  color: var(--tw-prose-code);
  font-size: 0.875rem;
  font-weight: 600;
  border-radius: 0.5rem;
  padding-left: 0.25rem;
  padding-right: 0.25rem;
}

:root[data-theme="light"] {
  .prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    display: inline-block;
    font-size: 0.875rem;
    font-weight: 600;
    border-radius: 0.5rem;
    padding-left: 0.25rem;
    padding-right: 0.25rem;
  }
}

.prose :where(a code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: inherit;
}

.prose :where(:is(h2, h3) code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  font-weight: 700;
}

.prose :where(blockquote):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 1.5rem;
  border-left-width: 2px;
  border-left-color: var(--tw-prose-quote-borders);
  font-style: italic;
}

.prose :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-captions);
  font-size: 0.875rem;
  line-height: 1.5rem;
  margin-top: 0.75rem;
}

.prose :where(figcaption > p):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin: 0;
}

.prose :where(ul):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: disc;
}

.prose :where(ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  list-style-type: decimal;
}

.prose :where(ul, ol):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 1.5rem;
}

.prose :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
  padding-left: 0.875rem;
}

.prose :where(li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  font-size: 0.875rem;
  font-weight: 600;
}

.prose :where(ol > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  color: var(--tw-prose-counters);
}

.prose :where(ul > li):not(:where([class~="not-prose"],[class~="not-prose"] *))::marker {
  color: var(--tw-prose-bullets);
}

.prose :where(li :is(ol, ul)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 1rem;
  margin-bottom: 1rem;
}

.prose :where(li :is(li, p)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 0.75rem;
  margin-bottom: 0.75rem;
}

.prose :where(pre):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-pre-code);
  font-size: 0.875rem;
  font-weight: 500;
  background-color: #000000 !important;
  border-radius: 1.5rem;
  padding: 2rem;
  overflow-x: auto;
  border: 2px solid  rgb(228 228 231 / 0.1);
}

.prose :where(pre code):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  display: inline;
  color: inherit;
  font-size: inherit;
  font-weight: inherit;
  background-color: transparent;
  border-radius: 0;
  padding: 0;
}

.prose :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  margin-top: 5rem;
  margin-bottom: 5rem;
  border-top-width: 1px;
  border-color: var(--tw-prose-hr);
}

@media (min-width: 1024px) {

  .prose :where(hr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    margin-left: calc(3rem * -1);
    margin-right: calc(3rem * -1);
  }
}

.prose :where(table):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  width: 100%;
  table-layout: auto;
  text-align: left;
  font-size: 0.875rem;
}

.prose :where(thead):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-th-borders);
}

.prose :where(thead th):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  vertical-align: bottom;
  padding-bottom: 0.5rem;
}

.prose :where(thead th:not(:first-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0.5rem;
}

.prose :where(thead th:not(:last-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-right: 0.5rem;
}

.prose :where(tbody tr):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-td-borders);
}

.prose :where(tbody tr:last-child):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-bottom-width: 0;
}

.prose :where(tbody td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: baseline;
}

.prose :where(tfoot):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  border-top-width: 1px;
  border-top-color: var(--tw-prose-th-borders);
}

.prose :where(tfoot td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  vertical-align: top;
}

.prose :where(:is(tbody, tfoot) td):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.prose :where(:is(tbody, tfoot) td:not(:first-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-left: 0.5rem;
}

.prose :where(:is(tbody, tfoot) td:not(:last-child)):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  padding-right: 0.5rem;
}
